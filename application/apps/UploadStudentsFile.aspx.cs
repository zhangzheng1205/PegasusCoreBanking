using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using InterLinkClass.EntityObjects;
using System.Collections.Generic;
using System.IO;
using Excel;
using CrystalDecisions.Shared;
using CrystalDecisions.CrystalReports.Engine;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;

public partial class UploadStudentsFile : System.Web.UI.Page
{
    public string SystemFilePath = @"C:\Users\Administrator\Documents\";
    private List<Student> InvalidStudents = new List<Student>();
    private List<Student> ValidStudents = new List<Student>();
    private ReportDocument Rptdoc = new ReportDocument();
    private Datapay dh = new Datapay();
    private bool WeShouldAutoGenerateIDs = false;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["AreaCode"] == null) { return; }
        if (IsPostBack == false)
        {
            string UserType = Session["AreaCode"].ToString();
            if (UserType.Equals("PaymentAgent"))
            {
                btnUpload.Visible = false;
                cboUtility.Visible = false;
                MultiView1.Visible = false;
                ShowMessage("You Dont Have Rights To Use this Page", true);
            }
            else if (UserType.Equals("UtilityUser"))
            {
                string schoolCode=Session["DistrictCode"].ToString();
                cboUtility.Items.Clear();
                cboUtility.Items.Add(schoolCode);
                cboUtility.SelectedIndex =0 ;
                cboUtility.Enabled = false;
            }
            else if (UserType.Equals("General"))
            {
                cboUtility.Items.Clear();
                cboUtility.Enabled = true;
                LoadAllUtilities();
            }
        }
        
        
    }

    private void LoadAllUtilities()
    {
        UtilityDetails vendor = new UtilityDetails();
        vendor.UtilityCode = "";
        vendor.Active = true;
        DataLogin datafile = new DataLogin();
        DataTable dataTable = datafile.GetAllUtilities();
        //cboUtility.CurrentPageIndex = 0;
        cboUtility.DataSource = dataTable;
        cboUtility.DataValueField = "UtilityCode";
        cboUtility.DataTextField = "UtilityCode";
        cboUtility.DataBind();
    }

    protected void btnUpload_Click(object sender, EventArgs e)
    {
        try
        {
            if (FileUpload1.FileName.Trim().Equals(""))
            {
                ShowMessage("Please Browse Customer/Students file to Upload", true);
            }
            else
            {
                ValidateAndUploadFile();
            }
        }
        catch (Exception ex)
        {
            ShowMessage(ex.Message, true);
        }
    }

    private void ShowMessage(string Message, bool Error)
    {
        Label lblmsg = (Label)Master.FindControl("lblmsg");
        if (Error) { lblmsg.ForeColor = System.Drawing.Color.Red; lblmsg.Font.Bold = false; }
        else { lblmsg.ForeColor = System.Drawing.Color.Black; lblmsg.Font.Bold = true; }
        if (Message == ".")
        {
            lblmsg.Text = ".";
        }
        else
        {
            lblmsg.Text = "MESSAGE: " + Message.ToUpper();
        }
    }
    private void ValidateAndUploadFile()
    {
        string validationMsg = ValidateFileUploaded();

        if (validationMsg.Equals("OK"))
        {
            string filePath = UploadFile();
            Student[] students = ReadAllStudentsInFile(filePath);

            if (WeShouldAutoGenerateIDs)
            {
                CreateStudentsUsingAutoGeneratedIDs(students);
            }
            else
            {
                CreateStudentsUsingSuppliedIDs(students);
            }

            DisplayInsertedStudents(ValidStudents.ToArray());
            DisplayInvalidStudents(InvalidStudents.ToArray());
        }
        else
        {
            ShowMessage(validationMsg, true);
        }
    }

    private void CreateStudentsUsingAutoGeneratedIDs(Student[] students)
    {
        foreach (Student student in students)
        {
            string ID = InsertIntoCustomersTable(student);
            student.StudentRef = ID;
        }
        ValidStudents.Clear();
        ValidStudents.AddRange(students);
    }

    private void CreateStudentsUsingSuppliedIDs(Student[] students)
    {
        foreach (Student student in students)
        {
            if (!StudentAlreadyExists(student))
            {
                InsertIntoCustomersTable(student);
            }
            else
            {
                student.StatusDescription = "Student With Same ID Already Exists For your School";
                InvalidStudents.Add(student);
                ValidStudents.Remove(student);
            }
        }
    }

    private void DisplayInsertedStudents(Student[] ValidStudents)
    {
        MultiView1.ActiveViewIndex = 1;
        if (ValidStudents.Length > 0)
        {
            DataGrid2.DataSource = null;
            DataGrid2.AutoGenerateColumns = false;
            DataGrid2.Visible = false;
            DataGrid2.Enabled = false;
            DataGrid1.Enabled = true;
            DataGrid1.DataSource = null;
            DataGrid1.AutoGenerateColumns = true;
            DataGrid1.Visible = true;
            DataGrid1.DataSource = GetValidStudentsData(ValidStudents);
            DataGrid1.DataBind();
            MultiView1.ActiveViewIndex = 1;
            ShowMessage("FINISHED SUCCESSFULLY CREATING THESE STUDENTS", false);
        }
        else
        {
            MultiView1.ActiveViewIndex = 0;
            ShowMessage("FAILED TO CREATE ANY STUDENT.PLEASE CROSS CHECK FILE FORMAT AND RETRY", true);
            DataGrid2.DataSource = null;
            DataGrid2.AutoGenerateColumns = false;
            DataGrid2.Visible = false;
            DataGrid2.Enabled = false;
            DataGrid1.Enabled = true;
            DataGrid1.DataSource = null;
            Button3.Enabled = false;
        }
    }

    private DataTable GetValidStudentsData(Student[] ValidStudents)
    {
        // Here we create a DataTable with four columns.
        DataGrid1.Columns.Clear();
        DataTable table = new DataTable();
        table.Columns.Add("SchoolCode", typeof(string));
        table.Columns.Add("Student Name", typeof(string));
        table.Columns.Add("Student ID Number", typeof(string));
        table.Columns.Add("Account Balance", typeof(string));

        foreach (Student student in ValidStudents)
        {
            table.Rows.Add(student.SchoolCode, student.StudentName, student.StudentRef, student.Balance);
        }
        return table;
    }

    private void DisplayInvalidStudents(Student[] InvalidStudents)
    {
        MultiView1.ActiveViewIndex = 2;
        if (InvalidStudents.Length > 0)
        {
            DataGrid1.DataSource = null;
            DataGrid1.AutoGenerateColumns = true;
            DataGrid1.Visible = false;
            DataGrid1.Enabled = false;
            DataGrid2.Enabled = true;
            DataGrid2.DataSource = null;
            DataGrid2.AutoGenerateColumns = true;
            DataGrid2.Visible = true;
            DataGrid2.DataSource = GetInvalidStudentsData(InvalidStudents);
            DataGrid2.DataBind();
            MultiView1.ActiveViewIndex = 2;
            ShowMessage("FAILED TO ADD THESE STUDENTS TO THE SYSTEM", true);
        }
        else
        {
            DisplayInsertedStudents(ValidStudents.ToArray());
        }
    }

    private DataTable GetInvalidStudentsData(Student[] InvalidStudents)
    {
        // Here we create a DataTable with four columns.
        DataGrid2.Columns.Clear();
        DataTable table = new DataTable();
        table.Columns.Add("SchoolCode", typeof(string));
        table.Columns.Add("Student Name", typeof(string));
        table.Columns.Add("Student ID Number", typeof(string));
        table.Columns.Add("Reason", typeof(string));

        foreach (Student student in InvalidStudents)
        {
            table.Rows.Add(student.SchoolCode, student.StudentName, student.StudentRef, student.StatusDescription);
        }
        return table;
    }



    private string InsertIntoCustomersTable(Student student)
    {
        string rowID = dh.InsertIntoCustomersTable(student);
        return rowID;
    }

    private bool StudentAlreadyExists(Student student)
    {

        DataTable dt = dh.GetAllMatchingStudents(student.StudentRef, student.SchoolCode);
        if (dt.Rows.Count > 0)
        {
            return true;
        }
        return false;
    }


    private Student[] ReadAllStudentsInFile(string filePath)
    {
        string extension = Path.GetExtension(filePath).ToUpper();

        if (extension.Equals(".XLS") || extension.Equals(".XLSX"))
        {
            ValidStudents.AddRange(ReadAllLinesInExcelDoc(filePath));
        }
        if (ValidStudents.Count <= 0 && InvalidStudents.Count <= 0)
        {
            throw new ValidationException("SORRY FAILED TO READ CONTENT IN FILE.");
        }
        return ValidStudents.ToArray();
    }



    private Student[] ReadAllLinesInExcelDoc(string filePath)
    {
        FileStream stream = File.Open(filePath, FileMode.Open, FileAccess.Read);

        //1. Reading from a binary Excel file ('97-2003 format; *.xls)
        IExcelDataReader excelReader = null;
        if (Path.GetExtension(filePath).ToUpper().Equals(".XLS"))
        {
            excelReader = ExcelReaderFactory.CreateBinaryReader(stream);
        }
        else
        {
            //2. Reading from a OpenXml Excel file (2007 format; *.xlsx)
            excelReader = ExcelReaderFactory.CreateOpenXmlReader(stream);
        }
        //...
        //3. DataSet - The result of each spreadsheet will be created in the result.Tables
        DataTable result = excelReader.AsDataSet().Tables[0];
        List<Student> allStudents = new List<Student>();
        //5. Data Reader methods
        if (result.Rows.Count > 0)
        {
            if (result.Columns.Count > 3)
            {
                throw new ValidationException("YOUR FILE SHOULD HAVE 3 OR 2 COLUMNS(NO HEADERS) i.e NAME,UNIQUE ID, BALANCE(OPTIONAL)");
            }
            else if (result.Columns.Count == 1)
            {
                WeShouldAutoGenerateIDs = true;
            }

            foreach (DataRow row in result.Rows)
            {
                Student student = new Student();
                try
                {
                    student.StudentName = row[0].ToString().Trim();
                    student.SchoolCode = cboUtility.SelectedValue;

                    if (!WeShouldAutoGenerateIDs)
                    {
                        student.StudentRef = row[1].ToString().Trim();
                        student.Balance = row[2].ToString().Trim();
                    }
                    student.Validate();
                    if (student.StatusDescription.Equals("OK"))
                    {
                        allStudents.Add(student);
                    }
                    else
                    {
                        InvalidStudents.Add(student);
                    }
                }
                catch (Exception e)
                {
                    throw new ValidationException("CONTENT IN FILE IS IN THE WRONG FORMAT");
                }
            }
        }

        //6. Free resources (IExcelDataReader is IDisposable)
        excelReader.Close();
        return allStudents.ToArray();
    }

    private string UploadFile()
    {
        string filePath = SystemFilePath + GetSystemDateTime() + "_" + FileUpload1.FileName;
        FileUpload1.SaveAs(filePath);
        return filePath;

    }

    private string GetSystemDateTime()
    {
        string time = DateTime.Now.ToString("dd-mm-yyyy_HH-mm-ss");
        return time;
    }

    private string ValidateFileUploaded()
    {
        string filename = Path.GetFileName(FileUpload1.FileName);
        string extension = Path.GetExtension(filename);
        extension = extension.ToUpper();
        if (!(extension.Equals(".XLS") || extension.Equals(".XLSX")))
        {
            return "PLEASE UPLOAD AN EXCEL FILE WITH COLUMNS FOR [NAME, UNIQUE ID NUMBER(OPTIONAL), BALANCE(OPTIONAL)";
        }
        return "OK";
    }
    protected void Button3_Click(object sender, EventArgs e)
    {
        try
        {
            int index = MultiView1.ActiveViewIndex;
            string fileFormat = GetFileformat();
            if (fileFormat.Equals("NONE"))
            {
                ShowMessage("Please Select File Format", true);
            }
            else
            {
                ShowMessage(".", true);
                DataTable table = GetStudentsGridTable();
                string nameOfFile = "StudentsUploaded";
                LoadReport(table, fileFormat, nameOfFile);
            }
        }
        catch (Exception ex)
        {
            ShowMessage(ex.Message, true);
        }
        finally
        {
            Rptdoc.Dispose();
        }
    }


    private void LoadReport(DataTable dataTable, string fileformat, string fileName)
    {
        if (fileformat.Equals("1"))
        {
            ExportToPDF(dataTable,fileName);
        }
        else
        {
            ExportToExcel(dataTable,fileName);
        }
        ShowMessage(".", true);
    }

    protected void ExportToExcel(DataTable table,string fileName)
    {
        DataTable dt = table;

        //Create a dummy GridView
        GridView GridView1 = new GridView();
        GridView1.AllowPaging = false;
        GridView1.DataSource = dt;
        GridView1.DataBind();

        Response.Clear();
        Response.Buffer = true;
        Response.AddHeader("content-disposition",
         "attachment;filename="+fileName+".xls");
        Response.Charset = "";
        Response.ContentType = "application/vnd.ms-excel";
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);

        for (int i = 0; i < GridView1.Rows.Count; i++)
        {
            //Apply text style to each Row
            GridView1.Rows[i].Attributes.Add("class", "textmode");
        }
        GridView1.RenderControl(hw);

        //style to format numbers to string
        string style = @"<style> .textmode { mso-number-format:\@; } </style>";
        Response.Write(style);
        Response.Output.Write(sw.ToString());
        Response.Flush();
        Response.End();
    }

    
    protected void ExportToPDF(DataTable table,string fileName)
    {
        DataTable dt = table;

        //Create a dummy GridView
        GridView GridView1 = new GridView();
        GridView1.AllowPaging = false;
        GridView1.DataSource = dt;
        GridView1.DataBind();

        Response.ContentType = "application/pdf";
        Response.AddHeader("content-disposition",
            "attachment;filename="+fileName+".pdf");
        Response.Cache.SetCacheability(HttpCacheability.NoCache);
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        GridView1.RenderControl(hw);
        StringReader sr = new StringReader(sw.ToString());
        Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 0f);
        HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
        PdfWriter.GetInstance(pdfDoc, Response.OutputStream);
        pdfDoc.Open();
        htmlparser.Parse(sr);
        pdfDoc.Close();
        Response.Write(pdfDoc);
        Response.End();
    }

    private DataTable GetErrorGridTable()
    {
        DataTable dtble = GetErrorDataTable();
        //string vendor = cboUtility.SelectedItem.ToString();
        foreach (DataGridItem Items in DataGrid2.Items)
        {
            DataRow dr = dtble.NewRow();
            string SchoolCode = Items.Cells[0].Text;
            string StudentName = Items.Cells[1].Text;
            string StudentNumber = Items.Cells[2].Text;
            string Reason = Items.Cells[3].Text;
            string PrintedBy = Session["FullName"].ToString();
            ///////
            dr["SchoolCode"] = SchoolCode;
            dr["Student Name"] = StudentName;
            dr["Student ID Number"] = StudentNumber;
            dr["Reason"] = Reason;
            dr["PrintedBy"] = PrintedBy;
            dtble.Rows.Add(dr);
            dtble.AcceptChanges();
        }
        return dtble;
    }
    private DataTable GetErrorDataTable()
    {
        DataTable dt = new DataTable("Table2");
        dt.Columns.Add("SchoolCode");
        dt.Columns.Add("School Name");
        dt.Columns.Add("Student ID Number");
        dt.Columns.Add("Reason");
        dt.Columns.Add("PrintedBy");
        return dt;
    }


    private DataTable GetStudentsGridTable()
    {
        DataTable dtble = GetStudentsDataTable();
        //string vendor = cboUtility.SelectedItem.ToString();
        foreach (DataGridItem Items in DataGrid1.Items)
        {
            DataRow dr = dtble.NewRow();
            string SchoolCode = Items.Cells[0].Text;
            string StudentName = Items.Cells[1].Text;
            string StudentNumber = Items.Cells[2].Text;
            string StudentID = Items.Cells[3].Text;
            string AccBal = Items.Cells[4].Text;
            string PrintedBy = Session["FullName"].ToString();
            ///////
            dr["SchoolCode"] = SchoolCode;
            dr["Student Name"] = StudentName;
            dr["Student ID Number"] = StudentNumber;
            dr["Account Balance"] = AccBal;
            dr["PrintedBy"] = PrintedBy;
            dtble.Rows.Add(dr);
            dtble.AcceptChanges();
        }
        return dtble;
    }
    private DataTable GetStudentsDataTable()
    {
        DataTable dt = new DataTable("Table3");
        dt.Columns.Add("SchoolCode");
        dt.Columns.Add("Student Name");
        dt.Columns.Add("Student ID Number");
        dt.Columns.Add("Account Balance");
        dt.Columns.Add("PrintedBy");
        return dt;
    }

    private string GetFileformat()
    {
        string res = "NONE";
        if (rdPdf.Checked == false && rdExcel.Checked == false)
        {
            res = "NONE";
        }
        else
        {
            if (rdPdf.Checked == true)
            {
                res = "1";
            }
            else
            {
                res = "2";
            }
        }
        return res;
    }

    private string GetFileformat1()
    {
        string res = "NONE";

        if (RadioButton1.Checked == false && RadioButton2.Checked == false)
        {
            res = "NONE";
        }
        else
        {
            if (RadioButton1.Checked == true)
            {
                res = "1";
            }
            else
            {
                res = "2";
            }
        }
        return res;
    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        MultiView1.ActiveViewIndex = 0;
    }
    protected void Button5_Click(object sender, EventArgs e)
    {
        try
        {
            string fileFormat = GetFileformat1();
            if (fileFormat.Equals("NONE"))
            {
                ShowMessage("Please Select File Format", true);
                DisplayInvalidStudents(InvalidStudents.ToArray());
            }
            else
            {
                ShowMessage(".", true);
                DataTable table = GetErrorGridTable();
                string nameOfFile = "ErrorReport";
                LoadReport(table, fileFormat, nameOfFile);
            }
        }
        catch (Exception ex)
        {
            ShowMessage(ex.Message, true);
        }
        finally
        {
            Rptdoc.Dispose();
        }
    }
    protected void Button6_Click(object sender, EventArgs e)
    {
        DisplayInsertedStudents(ValidStudents.ToArray());
    }
}
